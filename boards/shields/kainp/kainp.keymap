/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt { tapping-term-ms = <250>; };

/ {
    behaviors {
        smart_shift: smart_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "Shift+";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        number_layer: number_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "NUMBER_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <0>;
        };

        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP>;
            ignore-modifiers;
        };

        nav_or_sys: nav_or_sys {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <0>;
            bindings = <&mo>, <&nav_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_QWERTY {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mo 5                  &kp Q  &kp W  &kp E                       &kp R        &kp T                  &kp Y           &kp U                 &kp I                       &kp O    &kp P     &nav_or_sys 5 7
&kp ESCAPE             &kp A  &kp S  &kp D                       &kp F        &kp G                  &kp H           &kp J                 &kp K                       &kp L    &kp SQT   &kp LEFT_ALT
&smart_shift LSHIFT 0  &kp Z  &kp X  &kp C                       &kp V        &kp B                  &kp N           &kp M                 &kp COMMA                   &kp DOT  &kp FSLH  &smart_shift RSHIFT 0
                                     &smart_shift LSHIFT LSHIFT  &lt 3 SPACE  &number_layer 4 TAB    &mt RCTRL BSPC  &mt LEFT_COMMAND RET  &smart_shift RSHIFT RSHIFT
            >;
        };

        Middlemak {
            bindings = <
&trans  &kp Q  &kp W  &kp L   &kp D   &kp G     &kp J   &kp F   &kp O      &kp U    &kp SEMI  &trans
&trans  &kp A  &kp S  &kp R   &kp T   &kp P     &kp Y   &kp N   &kp E      &kp I    &kp H     &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp K   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Windows {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans               &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans               &trans  &trans  &trans  &kp LWIN
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans               &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &mt RIGHT_ALT ENTER  &trans
            >;
        };

        brackets+ {
            bindings = <
&none   &kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &kp LG(T)           &kp COLON      &kp SQT                &kp PIPE           &none             &none            &none
&trans  &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)  &kp LEFT_COMMAND    &kp SEMICOLON  &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp LESS_THAN     &kp LEFT_BRACE   &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(B)           &kp GRAVE      &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp GREATER_THAN  &kp RIGHT_BRACE  &trans
                              &trans     &none      &trans              &trans         &trans                 &trans
            >;
        };

        Number {
            bindings = <
&none   &kp N1           &kp N2       &kp N3     &kp N4          &kp N5           &kp N6     &kp N7         &kp N8        &kp N9      &kp N0     &none
&trans  &kp GRAVE        &kp TILDE    &kp HASH   &kp UNDERSCORE  &kp BACKSLASH    &kp SLASH  &kp MINUS      &kp ASTERISK  &kp PLUS    &kp EQUAL  &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND  &kp DOLLAR      &kp PERCENT      &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp PERIOD  &none      &trans
                                      &trans     &trans          &none            &trans     &trans         &trans
            >;
        };

        Sys {
            bindings = <
&trans  &bootloader  &sys_reset  &soft_off  &none  &none    &none         &none         &soft_off     &sys_reset    &bootloader   &none
&none   &none        &none       &none      &none  &none    &out OUT_USB  &none         &none         &none         &none         &none
&none   &to 0        &to 1       &tog 2     &none  &none    &out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR
                                 &none      &none  &none    &none         &none         &none
            >;
        };

        WinCutPaste {
            bindings = <
&trans  &kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)           &trans  &trans  &none   &trans  &trans  &trans
&trans  &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LEFT_CONTROL    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)           &trans  &trans  &trans  &trans  &trans  &trans
                              &trans     &trans     &trans              &trans  &trans  &trans
            >;
        };

        Nav {
            bindings = <
&trans  &kp PG_UP  &trans    &kp UP    &trans     &trans    &trans  &trans  &soft_off  &trans  &trans  &trans
&trans  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans    &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans     &trans    &trans    &trans     &trans    &trans  &trans  &trans     &trans  &trans  &trans
                             &trans    &trans     &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Windows {
            if-layers = <2 3>;
            then-layer = <6>;
        };
    };
};
